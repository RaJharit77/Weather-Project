{"timestamp":"2025-06-27T14:15:00.247660","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-27T14:15:00.248730","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-27T14:15:00.818208","level":"info","event":"Done. Returned value was:       city  year  month  avg_temp  precipitation  wind_speed        date\n0    Paris  2018      1      -1.5           45.3        11.6  2018-01-01\n1    Paris  2018      2       0.7           26.6        13.3  2018-02-01\n2    Paris  2018      3       3.9           23.3        20.8  2018-03-01\n3    Paris  2018      4       4.5            3.5        15.0  2018-04-01\n4    Paris  2018      5      11.8           24.6        15.0  2018-05-01\n..     ...   ...    ...       ...            ...         ...         ...\n55  Sydney  2022      8      20.6           64.1         6.7  2022-08-01\n56  Sydney  2022      9      17.4           79.1         4.3  2022-09-01\n57  Sydney  2022     10       9.7           89.0        15.8  2022-10-01\n58  Sydney  2022     11       4.9           71.1         4.1  2022-11-01\n59  Sydney  2022     12       1.6           80.8         7.7  2022-12-01\n\n[420 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-27T14:15:00.818594","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197b1bd-c442-7477-a3bc-5bcffe12f9ea'), task_id='extract_historical_data', dag_id='weather_tourism_recommendation', run_id='manual__2025-06-27T14:14:53.204268+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): extract_historical_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 27, 14, 14, 57, 978022, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.923907Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924155Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924282Z","level":"info","event":"Current task name:extract_historical_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924413Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924524Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924634Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T14:15:01.924742Z","level":"info","event":"Task operator:<Task(PythonOperator): extract_historical_data>","chan":"stdout","logger":"task"}
