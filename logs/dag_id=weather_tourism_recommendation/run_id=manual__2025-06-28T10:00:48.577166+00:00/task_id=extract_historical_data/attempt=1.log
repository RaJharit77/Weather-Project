{"timestamp":"2025-06-28T10:00:48.891484","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-28T10:00:48.892599","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-28T10:00:49.519852Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.520209Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.520369Z","level":"info","event":"Current task name:extract_historical_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.520483Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.521586","level":"info","event":"Done. Returned value was:        city        date  month  year  avg_temp  precipitation  wind_speed\n0     Paris  2018-01-01      1  2018       2.6           45.0        12.0\n1     Paris  2018-02-01      2  2018       4.8           29.3        11.4\n2     Paris  2018-03-01      3  2018       7.8           24.3        11.2\n3     Paris  2018-04-01      4  2018      10.9           12.1        11.7\n4     Paris  2018-05-01      5  2018      15.2           33.2        10.2\n..      ...         ...    ...   ...       ...            ...         ...\n583  Sydney  2024-08-01      8  2024      21.5           92.9         9.4\n584  Sydney  2024-09-01      9  2024      21.6           83.5        11.8\n585  Sydney  2024-10-01     10  2024      15.8           73.1         8.2\n586  Sydney  2024-11-01     11  2024      11.1           58.9         8.6\n587  Sydney  2024-12-01     12  2024      10.4           43.1        10.6\n\n[588 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-28T10:00:49.521992","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197b5fb-82d9-7a9e-b752-e11284e57753'), task_id='extract_historical_data', dag_id='weather_tourism_recommendation', run_id='manual__2025-06-28T10:00:48.577166+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): extract_historical_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 28, 10, 0, 48, 807905, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.646899Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.647201Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T10:00:49.647387Z","level":"info","event":"Task operator:<Task(PythonOperator): extract_historical_data>","chan":"stdout","logger":"task"}
