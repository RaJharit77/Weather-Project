{"timestamp":"2025-06-27T11:21:26.409816","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-27T11:21:26.411514","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-27T11:21:26.987035","level":"info","event":"Done. Returned value was:       city  year  month  avg_temp  precipitation  wind_speed        date\n0    Paris  2018      1       1.4           45.2        16.6  2018-01-01\n1    Paris  2018      2       0.7           32.6        15.0  2018-02-01\n2    Paris  2018      3       0.4           26.5        16.8  2018-03-01\n3    Paris  2018      4       7.3           22.6        15.4  2018-04-01\n4    Paris  2018      5      13.8           19.1        12.4  2018-05-01\n..     ...   ...    ...       ...            ...         ...         ...\n55  Sydney  2022      8      17.1           52.1         5.5  2022-08-01\n56  Sydney  2022      9      21.5           71.7         6.9  2022-09-01\n57  Sydney  2022     10       8.2           89.2         5.3  2022-10-01\n58  Sydney  2022     11       4.8           67.1         5.3  2022-11-01\n59  Sydney  2022     12      -0.2           68.7         9.3  2022-12-01\n\n[420 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-27T11:21:26.987371","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197b11e-d43d-7e5d-bff7-b2ed373a3a24'), task_id='extract_historical_data', dag_id='weather_tourism_recommendation', run_id='manual__2025-06-27T11:21:17.081071+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): extract_historical_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 27, 11, 21, 21, 677014, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.311734Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.312176Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.312367Z","level":"info","event":"Current task name:extract_historical_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.312575Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.312784Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.312970Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T11:21:28.313092Z","level":"info","event":"Task operator:<Task(PythonOperator): extract_historical_data>","chan":"stdout","logger":"task"}
