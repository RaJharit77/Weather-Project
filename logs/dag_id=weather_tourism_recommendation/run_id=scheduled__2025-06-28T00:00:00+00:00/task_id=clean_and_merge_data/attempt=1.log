{"timestamp":"2025-06-28T09:14:35.868649","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-28T09:14:35.869825","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-28T09:14:36.416997Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.417262Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.417392Z","level":"info","event":"Current task name:clean_and_merge_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.417527Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.434660","level":"info","event":"Done. Returned value was:               city       date  month  ...  precipitation  wind_speed  humidity\n0            Paris 2023-01-01      1  ...          55.00       11.00       NaN\n1            Paris 2023-02-01      2  ...          60.00       12.00       NaN\n2            Paris 2023-03-01      3  ...          65.00       13.00       NaN\n3            Paris 2023-04-01      4  ...          70.00       14.00       NaN\n4            Paris 2023-05-01      5  ...          75.00       15.00       NaN\n..             ...        ...    ...  ...            ...         ...       ...\n2         New York 2025-06-28      6  ...           0.13        3.13      94.0\n3            Tokyo 2025-06-28      6  ...           0.00        6.69      48.0\n4     Antananarivo 2025-06-28      6  ...           0.00        2.06      53.0\n5   Rio de Janeiro 2025-06-28      6  ...           0.00        2.57      97.0\n6           Sydney 2025-06-28      6  ...           0.00        0.62      78.0\n\n[595 rows x 7 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-28T09:14:36.435044","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197b5cc-6297-7a03-8fea-08ab772700f2'), task_id='clean_and_merge_data', dag_id='weather_tourism_recommendation', run_id='scheduled__2025-06-28T00:00:00+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): clean_and_merge_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 28, 9, 14, 35, 755941, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.452879Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.453152Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-28T09:14:36.453364Z","level":"info","event":"Task operator:<Task(PythonOperator): clean_and_merge_data>","chan":"stdout","logger":"task"}
