{"timestamp":"2025-07-05T20:58:36.675495","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-05T20:58:36.676992","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-05T20:58:37.286710","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-07-05T20:58:37.307645","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-07-05T20:58:37.391560Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.392019Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.392365Z","level":"info","event":"Current task name:calculate_weather_scores","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.392631Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.349218","level":"info","event":"Chargement des données depuis /home/rajharit/airflow/dags/data/processed/merged_weather_data.csv","logger":"root"}
{"timestamp":"2025-07-05T20:58:37.361331","level":"info","event":"Calcul des scores météo","logger":"root"}
{"timestamp":"2025-07-05T20:58:37.385462","level":"info","event":"Agrégation des données","logger":"root"}
{"timestamp":"2025-07-05T20:58:37.399344","level":"info","event":"Données sauvegardées dans /home/rajharit/airflow/dags/data/outputs/monthly_weather_scores.csv","logger":"root"}
{"timestamp":"2025-07-05T20:58:37.416819","level":"info","event":"Done. Returned value was:             city  month  weather_score       temp  precipitation  wind_speed\n0   Antananarivo      1       0.295243  12.557143      34.728571   10.057143\n1   Antananarivo      2       0.330129  12.714286      23.957143   10.371429\n2   Antananarivo      3       0.372471  15.000000      19.557143   10.957143\n3   Antananarivo      4       0.572700  19.542857      16.528571   10.485714\n4   Antananarivo      5       0.737286  24.785714      39.714286    9.857143\n..           ...    ...            ...        ...            ...         ...\n79         Tokyo      8       0.486057  21.028571      72.314286    9.842857\n80         Tokyo      9       0.285429  17.214286      74.571429   10.157143\n81         Tokyo     10       0.181771  15.485714      81.457143   10.242857\n82         Tokyo     11       0.211257  10.814286      60.771429   10.642857\n83         Tokyo     12       0.250686   7.500000      47.771429   10.600000\n\n[84 rows x 6 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-05T20:58:37.417282","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197dc62-207e-7e6d-89be-d3ff3f3e2d26'), task_id='calculate_weather_scores', dag_id='weather_tourism_recommendation', run_id='manual__2025-07-05T20:58:27.811281+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): calculate_weather_scores>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 5, 20, 58, 36, 576019, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.435889Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.436218Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-05T20:58:37.512340Z","level":"info","event":"Task operator:<Task(PythonOperator): calculate_weather_scores>","chan":"stdout","logger":"task"}
