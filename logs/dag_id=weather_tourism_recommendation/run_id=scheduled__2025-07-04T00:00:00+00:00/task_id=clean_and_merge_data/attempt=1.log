{"timestamp":"2025-07-04T13:55:24.077621","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-04T13:55:24.078751","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-04T13:55:24.638521Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.638871Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.639078Z","level":"info","event":"Current task name:clean_and_merge_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.639261Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.664082","level":"info","event":"Done. Returned value was:               city       date  month  ...  precipitation  wind_speed  humidity\n0            Paris 2023-01-01      1  ...           36.4       11.40       NaN\n1            Paris 2023-02-01      2  ...           23.6        9.40       NaN\n2            Paris 2023-03-01      3  ...           13.3       11.00       NaN\n3            Paris 2023-04-01      4  ...           27.8       11.80       NaN\n4            Paris 2023-05-01      5  ...           39.6        8.20       NaN\n..             ...        ...    ...  ...            ...         ...       ...\n1         New York 2025-07-04      7  ...            0.0        4.12      60.0\n2            Tokyo 2025-07-04      7  ...            0.0        7.20      82.0\n3     Antananarivo 2025-07-04      7  ...            0.0        5.14      67.0\n4   Rio de Janeiro 2025-07-04      7  ...            0.0        5.66      83.0\n5           Sydney 2025-07-04      7  ...            0.0        0.51      87.0\n\n[594 rows x 8 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-04T13:55:24.664442","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197d5b3-3a32-74f4-9620-e7c966628f90'), task_id='clean_and_merge_data', dag_id='weather_tourism_recommendation', run_id='scheduled__2025-07-04T00:00:00+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): clean_and_merge_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 4, 13, 55, 23, 980927, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.689198Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.689522Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T13:55:24.689742Z","level":"info","event":"Task operator:<Task(PythonOperator): clean_and_merge_data>","chan":"stdout","logger":"task"}
