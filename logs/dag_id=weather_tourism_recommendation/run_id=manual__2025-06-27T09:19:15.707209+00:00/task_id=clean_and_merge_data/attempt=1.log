{"timestamp":"2025-06-27T09:19:36.937192","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-27T09:19:36.938112","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-27T09:19:37.482996","level":"info","event":"Done. Returned value was:                city       date  month  ...  precipitation  wind_speed  humidity\n0             Paris 2018-01-01      1  ...           61.0       21.20       NaN\n1             Paris 2018-02-01      2  ...           31.8       12.50       NaN\n2             Paris 2018-03-01      3  ...           20.9       16.30       NaN\n3             Paris 2018-04-01      4  ...           40.0       12.60       NaN\n4             Paris 2018-05-01      5  ...           25.6       13.90       NaN\n..              ...        ...    ...  ...            ...         ...       ...\n422        New York 2025-06-27      6  ...            0.0        5.66      82.0\n423           Tokyo 2025-06-27      6  ...            0.0        2.57      65.0\n424    Antananarivo 2025-06-27      6  ...            0.0        4.12      56.0\n425  Rio de Janeiro 2025-06-27      6  ...            0.0        4.02      88.0\n426          Sydney 2025-06-27      6  ...            0.0        4.63      74.0\n\n[427 rows x 8 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-27T09:19:37.483381","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197b0af-1d49-79c0-b9dc-d30a2ffb93bd'), task_id='clean_and_merge_data', dag_id='weather_tourism_recommendation', run_id='manual__2025-06-27T09:19:15.707209+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): clean_and_merge_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 6, 27, 9, 19, 35, 208847, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.765986Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766243Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766376Z","level":"info","event":"Current task name:clean_and_merge_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766519Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766634Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766748Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-27T09:19:38.766866Z","level":"info","event":"Task operator:<Task(PythonOperator): clean_and_merge_data>","chan":"stdout","logger":"task"}
