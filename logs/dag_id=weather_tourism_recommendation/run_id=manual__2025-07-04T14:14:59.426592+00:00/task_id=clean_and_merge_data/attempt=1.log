{"timestamp":"2025-07-04T14:15:06.645560","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-04T14:15:06.646704","level":"info","event":"Filling up the DagBag from /home/rajharit/airflow/dags/meteo_tourism_dags.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-04T14:15:07.331651Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.331985Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.332121Z","level":"info","event":"Current task name:clean_and_merge_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.332240Z","level":"info","event":"Dag name:weather_tourism_recommendation","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.321190","level":"info","event":"Done. Returned value was:               city       date  month  ...  precipitation  wind_speed  humidity\n0            Paris 2023-01-01      1  ...           53.7        8.20       NaN\n1            Paris 2023-02-01      2  ...           36.7       10.20       NaN\n2            Paris 2023-03-01      3  ...           16.2       10.80       NaN\n3            Paris 2023-04-01      4  ...           30.9       11.00       NaN\n4            Paris 2023-05-01      5  ...           27.0        8.50       NaN\n..             ...        ...    ...  ...            ...         ...       ...\n2         New York 2025-07-04      7  ...            0.0        5.14      57.0\n3            Tokyo 2025-07-04      7  ...            0.0        7.20      82.0\n4     Antananarivo 2025-07-04      7  ...            0.0        4.63      67.0\n5   Rio de Janeiro 2025-07-04      7  ...            0.0        4.63      78.0\n6           Sydney 2025-07-04      7  ...            0.0        0.51      87.0\n\n[595 rows x 8 columns]","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-04T14:15:07.321580","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0197d5ca-60bb-7beb-bd4a-7489b36c6406'), task_id='clean_and_merge_data', dag_id='weather_tourism_recommendation', run_id='manual__2025-07-04T14:14:59.426592+00:00', try_number=1, map_index=-1, hostname='rajoharitiana-dellg155511', context_carrier=None, task=<Task(PythonOperator): clean_and_merge_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 7, 4, 14, 15, 6, 507070, tzinfo=TzInfo(UTC)), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None)","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.359925Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.360240Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-04T14:15:07.459848Z","level":"info","event":"Task operator:<Task(PythonOperator): clean_and_merge_data>","chan":"stdout","logger":"task"}
